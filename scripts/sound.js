export class WaveWriter{buffer;constructor(){this.buffer=""}writeByte(t){this.buffer+=String.fromCharCode(t)}writeText(t){this.buffer+=t}writeInt16(t){this.writeByte(255&t),this.writeByte(t>>8&255)}writeInt32(t){this.writeByte(255&t),this.writeByte(t>>8&255),this.writeByte(t>>16&255),this.writeByte(t>>24&255)}encodeBase64(){return btoa(this.buffer)}static fromChunks(t){const e=new WaveWriter,r=t.reduce((t,e)=>t+e.size+8,0);e.writeText("RIFF"),e.writeInt32(r+4),e.writeText("WAVE");for(let r of t)e.writeText(r.tag),e.writeInt32(r.size),r.writeDataTo(e);return e}}export class WaveHeader{code;channels;samplesPerSecond;bytesPerSecond;blockAlign;bitsPerSample;constructor(t,e,r,a){this.code=t,this.channels=e,this.samplesPerSecond=r,this.bytesPerSecond=r*e*a,this.blockAlign=e*a,this.bitsPerSample=8*a}get size(){return 16}get tag(){return"fmt "}writeDataTo(t){t.writeInt16(this.code),t.writeInt16(this.channels),t.writeInt32(this.samplesPerSecond),t.writeInt32(this.bytesPerSecond),t.writeInt16(this.blockAlign),t.writeInt16(this.bitsPerSample)}static monaural=new WaveHeader(1,1,44100,1)}export class WaveData{size;data;constructor(t){this.size=t,this.data=new Float64Array(t);for(let e=0;e<t;e++)this.data[e]=0}get tag(){return"data"}writeDataTo(t){for(let e=0;e<this.size;e++)t.writeByte(Math.min(255,Math.floor(128*(this.data[e]??0))+128))}addFloat(t,e){this.data[t]=(this.data[t]??0)+e}addSine(t,e,r,a){const i=44100/t,o=Math.floor(Math.floor(a/i)*i),s=2*Math.PI*t/44100;for(let t=0;t<o;t++){const a=e*Math.min(500,t)/500,i=e*Math.min(2e3,o-t)/2e3;this.addFloat(t+r,Math.sin(t*s)*Math.min(a,i))}return o}addSaw(t,e,r,a){const i=44100/t,o=Math.floor(Math.floor(a/i)*i),s=44100/t;for(let t=0;t<o;t++){const a=e*Math.min(500,t)/500,i=e*Math.min(2e3,o-t)/2e3;this.addFloat(t+r,(t%s/s*1.2-.6)*Math.min(a,i))}return o}}export class AudioSource{constructor(){}static create(t){return"data:audio/wav;base64,"+WaveWriter.fromChunks([WaveHeader.monaural,t]).encodeBase64()}static createFromMonzos(t,e,r,a){const i=new WaveData(Math.floor(44100*r)),o=.95/Math.max(t.length,8);for(const s of t)i.addSaw(e*s.quantizedValue(a),o,0,Math.floor(4e4*r));return AudioSource.create(i)}}export class Sound{constructor(){}static createMonoAudio(t){const e=document.createElement("audio");return e.src=AudioSource.create(t),e}}