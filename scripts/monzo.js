export class Monzo{static#t=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];static one=new Monzo(new Map);factors;constructor(t){this.factors=t}get value(){let t=1;for(const[o,r]of this.factors)t*=Math.pow(o,r);return t}get pitchDistance(){let t=0;for(const[o,r]of this.factors)t+=Math.abs(r);return t}get isOnly2(){return 1===this.factors.size&&this.factors.has(2)}get pitch(){return Math.log2(this.value)}get pitchClass(){return this.pitch%1}get minPrime(){let t=1/0;for(const[o,r]of this.factors)0!==r&&o<t&&(t=o);return t===1/0?1:t}quantizedValue(t){return t<1?this.value:Math.pow(2,Math.round(Math.log2(this.value)*t)/t)}reciprocal(){const t=new Map;for(const[o,r]of this.factors)t.set(o,-r);return new Monzo(t)}toString(){let t="";for(const[o,r]of this.factors)r>0?t+=`${o}^${r} `:r<0&&(t+=`${o}^(${-r}) `);return t.trim()}static fromInt(t){const o=new Map;let r=t;for(const t of Monzo.#t)for(;t<=r&&r%t===0;)if(o.set(t,(o.get(t)??0)+1),r/=t,r<=1)return new Monzo(o);for(let t=101;t<=r;t++)for(;t<=r&&r%t===0;)if(o.set(t,(o.get(t)??0)+1),r/=t,r<=1)return new Monzo(o);return new Monzo(o)}static fromFraction(t,o){return Monzo.divide(Monzo.fromInt(t),Monzo.fromInt(o))}static multiply(t,o){const r=new Map;for(const[o,e]of t.factors)r.set(o,e);for(const[t,e]of o.factors){const o=(r.get(t)??0)+e;0===o?r.delete(t):r.set(t,o)}return new Monzo(r)}static divide(t,o){return Monzo.multiply(t,o.reciprocal())}static getOctaveFactor(t){let o=0;for(const[r,e]of t.factors)2!==r&&(o+=Math.floor(Math.log2(r))*e);return o}static from2Factor(t){return new Monzo(new Map([[2,t]]))}static getShasavicOctaveFactor(t){let o=0;for(const[r,e]of t.factors)3===Math.round(r)?o+=e:2!==r&&(o+=2*e);return o}static parseMonzos(t){return t.trim().split(/\s+/).map(t=>{if(t.includes("/")){const[o,r]=t.split("/").map(Number);return Monzo.fromFraction(o??1,r??1)}return Monzo.fromInt(Number(t))})}}